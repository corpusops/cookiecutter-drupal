vcl 4.1;
# ^^^
# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.1 format.

# THIS FILE IS GENERATED BY ANSIBLE

{{'{{-'}} $v := dict "$" $ -}}
{{'{{-'}} $v := merge $v ( dict "domain"                    ( .Env.ABSOLUTE_URL_DOMAIN | default "www.example.com" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "monitoring_ip"             ( .Env.MONITORING_IP | default "10.0.0.1" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "load_balancer_ip"          ( .Env.LOAD_LANCER_IP | default "10.0.0.2" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "varnish_http_auth"         ( .Env.VARNISH_HTTP_AUTH | default "" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "hide_x_cache_tags"         ( .Env.VARNISH_HIDE_X_CACHE_TAGS | default "" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "backends"                  ( .Env.VARNISH_BACKENDS | default "nginx" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "probe_url"                 ( .Env.VARNISH_PROBE_URL | default "/monitor-status.php" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "no_cache_cookie"           ( .Env.VARNISH_NO_CACHE_COOKIE | default "NO_CACHE" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "no_cache_url"              ( .Env.VARNISH_NO_CACHE_URL | default "" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "varnish_ttl_static"        ( .Env.VARNISH_TTL_STATIC | default "1h" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "varnish_ttl_static_client" ( .Env.VARNISH_TTL_STATIC_BROWSER | default "900" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "varnish_nginx_secret"      ( .Env.VARNISH_NGINX_SHARED_SECRET | default "shared_secret_stuff" ) ) -}}
{{'{{-'}} $v := merge $v ( dict "varnish_env_mode"          ( .Env.DRUPAL_ENV_NAME | default "prod" ) ) -}}

import directors;
import std;

# Default backend definition. Set this to point to your content server.

{{'{{-'}}  range $v.backends | splitList " " }}
backend backend_drupal_{{'{{'}}  . | replace "." "_"}} {
    .host = "{{'{{'}}  . }}";
    # that does not work, it's nginx which alters the host adding internal-, in fact.
    # because on the Varnish side this is used only when no host headers are present
    # .host_header = "internal-{{'{{'}}  $v.domain }}";
    .port = "80";
    .connect_timeout = 5s;
    .first_byte_timeout = 200s;
    .between_bytes_timeout = 60s;
    .probe = {
        .request =
            "GET {{'{{'}}  $v.probe_url }} HTTP/1.1"
            "Host: internal-{{'{{'}}  $v.domain }}"
            "x-mkcp-origin-host: {{'{{'}}  $v.domain }}"
            "x-mkcp-caesar: {{'{{'}}  $v.varnish_nginx_secret }}"
            "X-SSL: 1"
            "Connection: close"
            "Accept-Encoding: gzip";
        .interval = 2s;
        .timeout = 8s;
        .window = 5;
        .threshold = 2;
    }
}
{{'{{-'}}  end }}

sub vcl_init {
    # create round-robin director with all backends
    new lb_default = directors.round_robin();
    {{'{{-'}}  range $v.backends | splitList " " }}
    lb_default.add_backend(backend_drupal_{{'{{'}}  . | replace "." "_"}});
    {{'{{-'}}  end }}
}

acl restricted {
    "localhost";
    "{{'{{'}}  $v.monitoring_ip }}";
    "{{'{{'}}  $v.load_balancer_ip }}";
}

# servers allowed to send BAN requests
acl ban_agents {
    "localhost";
    {{'{{-'}}  range $v.backends | splitList " " }}
    "{{'{{'}}  . }}";
    "cron";
    {{'{{-'}}  end }}
}

sub vcl_recv {
    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.
    # RETURN ACTIONS ########################
    # pipe: never do that
    # pass: transfer to backend, almost transparent mode
    # hash: check internal cache (or pass to backend)
    # lookup: only used in vcl_hash, in vcl_recv it's hash
    # fetch: used in vcl_pass, to make a pass
    # deliver: this has to be used in vcl_backend_response, deliver the cached object
    # esi: ESI-Gate
    # purge : purge cache
    # synth : error case

    # BAN (cleanup)
    # When a BAN is emmitted pages retrieved from the cache will be checked
    # against all BAN commands performed after the cache page entry. If a ban is
    # matching the page will be a cache-miss
    # when all pages from caches are newer than a ban the ban is removed (Type
    # ban.list on varnish console to list active bans)
    # If an authorized server sends this request:
    #   BAN / HTTP/1.1
    #   Host: <varnish ip>
    #   X-Cache-Tags: foo
    # It will ban (sort of purge on match) any page that was recorder with the
    # right X-Cache-Tags in the response, like this one for example
    #    HTTP/1.1 200 OK
    #    Content-Type: text-html
    #    Content-Length: 5244
    #    X-Cache-Tags: foo,bar,toto,user_441
    #    ...
    if (req.method == "BAN") {
        if (!client.ip ~ ban_agents) {
            return(synth(405,"Not allowed."));
        }

        # ensure no upcase/downcase mistake
        set req.http.Cache-Tags = std.tolower(req.http.Cache-Tags);
        # ban are constructed on the obj.* and not req.* to become "ban lurker" friendly
        # so that they are cleaned up in a background task.
        # always do that unless you implement key surrogate direct purges
        # @see vcl_backend_response for X-Ban-Path & X-Ban-Purge-Tags recording on this
        # cached obj.
        if ((req.url == "/tags") && req.http.Cache-Tags) {
            # Drupal 9 cache-tags Ban
            set req.http.Cache-Tags = "(^|\s)" + regsuball(std.tolower(req.http.Cache-Tags), "\,", "(\\s|$)|(^|\\s)") + "(\s|$)";
            ban("obj.http.X-Ban-Purge-Tags ~ " + req.http.Cache-Tags);
            return (synth(200, "Tags Ban added."));
        }
        else {
            # ensure no upcase/downcase mistake
            set req.url = std.tolower(req.url);
            if (req.url ~ "\*") {
                # Uri wildcard Ban
                set req.url = regsuball(req.url, "\*", "\.*");
                ban("obj.http.X-Ban-Path ~ ^" + req.url + "$");
                return (synth(200, "Wildcard Url Ban added."));
            }
            else {
                # Uri Ban
                ban("obj.http.X-Ban-Path == " + req.url);
                return (synth(200, "Url Ban added."));
            }
        }
    }

    {{'{{'}}  if $v.varnish_http_auth }}
        # preprod only: add a simple http auth to prevent indexation
        # But not on /monitor-status.php
        if ( (! req.http.Authorization ~ "Basic {{'{{'}}  $v.varnish_http_auth }}") && (! req.url ~ "^/monitor-status\.php" )) {
            return(synth(401, "Restricted"));
        }
        if (req.http.Authorization && (! req.url ~ "^/mailcatcher/") ) {
            # Now varnish will ignore the fact this should not be cacheable (because of http auth)
            # and cache it as if it did not exists
            # mailcatcher may provides it's own http auth policy, so we keep the header (and prevent caching)
            unset req.http.Authorization;
        }
    {{'{{'}} else }}
        if (req.http.Authorization && (! req.url ~ "^/mailcatcher/") ) {
            # Mailcatcher may provides it's own http auth policy, so we keep the header (and prevent caching)
            # Other authentication may already have been tested by Nginx front, we remove
            # auth headers and allow caching
            unset req.http.Authorization;
        }
    {{'{{'}}  end }}

    # Caesar secret for communication with internal-* domains on Nginx backends
    set req.http.x-mkcp-caesar = "{{'{{'}}  $v.varnish_nginx_secret }}";

    # NORMALIZATION OF ACCEPT-ENCODING HEADER
    # either gzip, then deflate, then none
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpeg|jpg|png|gif|ico|gz|tgz|bz2|tbz|mp3|ogg|woff|svg|swf)(\?.*)?$") {
            # No point in compressing these
            unset req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
           set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
           set req.http.Accept-Encoding = "deflate";
        } else {
           # unkown algorithm
           unset req.http.Accept-Encoding;
        }
    }

    # BACKEND CHOICE
    # Here no filters on if (req.http.host ~ "foo.example.com$")
    # As we have only one backend
    # CATCH ALL
    set req.backend_hint = lb_default.backend();

    if (! req.http.host) {
        return(synth(400, "No host header, common, HTTP/1.1"));
    }

    # Do not cache these paths and restrict access
    if (req.url ~ "^/php-status-drupal" ||
        req.url ~ "^/nginx-status") {
      if (!client.ip ~ restricted) {
          return(synth(405, "Not Allowed"));
      } else {
          return (pass);
      }
    }
    if (req.url ~ "^/monitor-status\.php" ) {
        if (! (std.ip(regsub(req.http.X-Forwarded-For, "[, ].*$", ""), client.ip)~ restricted)) {
            return(synth(405, "Not Allowed"));
        }
    }

    # Drupal specific tasks
    call drupal_recv;

    # ------------------------------------------------
    # Remove all cookies that Drupal doesn't need to know about. ANY remaining
    # cookie will cause the request to pass-through to Apache.
    # Currently on power user have sessions, we disable the cache for all power users
    # we also keep this same 'disable cache' for {{'{{'}}  $v.no_cache_cookie }} cookies, if you need
    # to generate such short-term cookies for anonymous users one day (be carefull
    # with disabling the cache)
    # D9 ----------------------------------------------
    if (req.http.Cookie) {
        # Successive operations clean cookies, as illustrated in the example below.
        # a=b; SESS4564645=123; c=d;  {{'{{'}}  $v.no_cache_cookie }}=Y; x=y
        # ;a=b; SESS4564645=123; c=d;  {{'{{'}}  $v.no_cache_cookie }}=Y; x=y
        # ;a=b;SESS4564645=123;c=d;{{'{{'}}  $v.no_cache_cookie }}=Y;x=y
        # ;a=b; SESS4564645=123;c=d; {{'{{'}}  $v.no_cache_cookie }}=Y;x=y
        # SESS4564645=123; {{'{{'}}  $v.no_cache_cookie }}=Y;
        # Add a semi-colon as prefix to make regexps easier.
        set req.http.Cookie = ";" + req.http.Cookie;
        # Remove spaces before cookie names.
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        # Add spaces before cookies we want to keep.
        set req.http.Cookie = regsuball(req.http.Cookie, ";(SSESS[a-z0-9]+|SESS[a-z0-9]+|XDEBUG_SESSION|{{'{{'}}  $v.no_cache_cookie }})=", "; \1=");
        # And remove cookies without spaces before them.
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        # Trim remaining spaces and semi-colons.
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

        if (req.http.Cookie == "") {
            # If there are no remaining cookies, remove the cookie header. If there
            # aren't any cookie headers, Varnish's default behavior will be to cache
            # the page.
            unset req.http.Cookie;
        }
    }

    if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "OPTIONS" &&
      req.method != "DELETE") {
       # Non-RFC2616 or CONNECT which is weird, we remove TRACE also.
       return(synth(501, "Not Implemented"));
    }

    if (req.method != "GET" && req.method != "HEAD") {
        # for cache we only deal with GET and HEAD, by default
        return(pass);
    }

    # if (req.http.Authorization || req.http.Cookie) {
    if (req.http.Cookie) {
        # Not cacheable, by definition
        return(pass);
    }

    # else we do an internal cache check
    # was lookup in previous versions of varnish
    return(hash);
}


sub drupal_recv {

  {{'{{'}}  if ne $v.varnish_env_mode "dev" }}
  # Static content can be cached
  # No security problems (like tricking /admin/reports/index.php/foo.css) because
  # the admin would have no session here, so we would cache a 403
  if (      
      req.url ~ "\.(css|js|jpeg|jpg|png|gif|ico|gz|tgz|bz2|tbz|mp3|ogg|woff|eot|ttf|svg|otf|swf|html|htm|htc|map|json)(\?.*)?$"
  ) {
         unset req.http.cookie;
  }
  {{'{{'}}  end }}

  {{'{{'}}  if $v.no_cache_url }}
  # Never cache these paths.
  if (
      req.url ~ "^{{'{{'}}  $v.no_cache_url }}/.*"
    ) {
       return (pass);
  }
  {{'{{'}}  end }}

  # Do not cache admin/documentation, ACL handled by Drupal
  if (
      req.url ~ "^/admin/documentation/"
    ) {
       return (pass);
  }

  # Uncomment this to trigger the vcl_error() subroutine,
  # which will HTML output you some variables
  # return(synth(700, 'debug'));

  {{'{{'}}  if ne $v.varnish_env_mode "dev" }}
  # clean static files from cookies, so that we can cache them all
  if (req.url ~ "^/sites/([^/]*)/files") {
    unset req.http.cookie;
  }
  {{'{{'}}  end }}
}


sub vcl_synth {
    if (resp.status == 401) {
        set resp.http.Content-Type = "text/html; charset=utf-8";
        set resp.http.WWW-Authenticate = "Basic realm=Secured";
        synthetic({"

        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd">

        <HTML>
        <HEAD>
        <TITLE>Error</TITLE>
        <META HTTP-EQUIV='Content-Type' CONTENT='text/html;'>
        </HEAD>
        <BODY><H1>401 Unauthorized (varnish)</H1></BODY>
        </HTML>
        "});
        return (deliver);
    }
}

sub vcl_backend_response {
    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.

    # Allow the backend to serve up stale content if it is responding slowly.
    set beresp.grace = 3d;

    if (beresp.status >= 500 && beresp.status < 600 && bereq.http.do-not-use-50x-responses) {
        # we have an error from the backend (or a maintenance mode)
        # but the do-not-use-50x-responses means this page came after a vcl_hit.
        # we do not want to replace the stale-grace cached object with an error or
        # maintenance page, this was a background check, we can abandon it
        return (abandon);
    }

    # Cache Cleanup
    #
    # record stuff for the ban-lurker clenaup process
    # (sort of garbage collector working with bans)
    set beresp.http.X-Ban-Path = std.tolower(bereq.url);
    set beresp.http.X-Ban-Purge-Tags = std.tolower(beresp.http.Cache-Tags);

    if (beresp.http.X-No-Cache) {
        set beresp.uncacheable = true;
        return (deliver);
    }

    # HTTP/1.0 Pragma: nocache support
    if (beresp.http.Pragma ~ "nocache") {
        set beresp.uncacheable = true;
        set beresp.ttl = 120s; # how long not to cache this url.
    }

    if (bereq.url ~ "\.(css|js|jpeg|jpg|png|gif|ico|gz|tgz|bz2|tbz|mp3|ogg|woff|eot|ttf|svg|otf|swf|html|htm|htc|map|json)") {

        # Don't allow static files to set cookies.
        unset beresp.http.set-cookie;

        # Enforce varnish TTL of static files
        set beresp.ttl = {{'{{'}}  $v.varnish_ttl_static }};

        # will make vcl_deliver reset the Age: header
        set beresp.http.magic_age_marker = "1";

        # Enforce Browser cache control policy
        unset beresp.http.Cache-Control;
        unset beresp.http.expires;
        set beresp.http.Cache-Control = "public, max-age={{'{{'}}  $v.varnish_ttl_static_client }}";

        # Specific TTL for some resources examples :
        # if (bereq.url ~ "events\.json(\?.*)?$") {
        #     # Cache the "events" map GeoJson for 5 minutes only, as it returns realtime
        #     # data to final users.
        #     set beresp.ttl = 300s;
        #     set beresp.http.Cache-Control = "public, max-age=300";
        # }
        # if (bereq.url ~ "^(/(en|fr|nl))?/api/.*") {
        #     # Microcache for theses ones
        #     # we do not need more than 1 minute
        #     set beresp.ttl = 60s;
        #     set beresp.http.Cache-Control = "public, max-age=60";
        # }

    } else {

        # Set a magic marker, this could be cacheable or not
        # but we will use this marker to alter this cacheable behavior
        # for Safari in the deliver phase (and avoid doing it for assets)
        # We do not do it in fetch because this should only be done for one user-agent
        # and the user-agent is not on the cache identifier (hash), so doing it here
        # would store the result in cache for all user agents
        set beresp.http.magicmarker = "1";

    }

    # cache 404 for 60s
    if (beresp.status == 404) {
        set beresp.ttl = 60s;
        set beresp.http.Cache-Control = "max-age=60";
    }

    if (beresp.http.Set-Cookie) {
        set beresp.http.X-Varnish-Cacheable = "NO:Not Cacheable setting cookie";
        set beresp.uncacheable = true;
        return(deliver);
    }

    if (beresp.ttl <= 0s) {
        set beresp.http.X-Varnish-Cacheable = "NO:Not Cacheable";
        set beresp.uncacheable = true;
        return(deliver);
    } else {

        # varnish TTL will be the one set by the application
        # set beresp.ttl = ;
        # will make vcl_deliver reset the Age: header
        set beresp.http.magic_age_marker = "1";

        # Enforce Browser cache control policy
        # this should be shorter than the real ttl managed by Varnish
        unset beresp.http.Cache-Control;
        unset beresp.http.expires;
        set beresp.http.Cache-Control = "public, max-age=300";

    }

    if (beresp.uncacheable) {
        set beresp.http.X-Varnish-Cacheable = "No, in fact.";
    } else {
        set beresp.http.X-Varnish-Cacheable = "YES";
    }
    set beresp.http.X-Varnish-TTL = beresp.ttl;

    return(deliver);
}


sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
    set resp.http.X-Varnish-Cache-Hits = obj.hits;

    # Safari fix (make content uncacheable in browser cache) should apply only
    # on non-assets things, check the magicmarker for that
    if (resp.http.magicmarker) {
        unset resp.http.magicmarker;
        # Safari Fix, @see https://drupal.org/node/1910178 https://drupal.org/node/2147147
        if (req.http.user-agent ~ "Safari" && req.http.user-agent !~ "Chrome") {
          set resp.http.Cache-Control = "no-cache, must-revalidate, post-check=0, pre-check=0";
          unset resp.http.Etag;
          unset resp.http.Expires;
          unset resp.http.Last-Modified;
          set resp.http.age = "0";
        }
    }
    # magic marker use to avoid giving real age of object to browsers
    if (resp.http.magic_age_marker) {
        unset resp.http.magic_age_marker;
        set resp.http.age = "0";
    }

    {{'{{-'}}  if $v.hide_x_cache_tags }}
    # hide Cache Tagging
    unset resp.http.X-Cache-Tags;
    # this is from varnish_purger
    unset resp.http.Cache-Tags;
    unset resp.http.X-Drupal-Cache-Contexts;
    unset resp.http.X-Drupal-Cache-Tags;
    unset resp.http.X-Drupal-Dynamic-Cache;
    unset resp.http.X-Varnish-Cache-Hits;
    unset resp.http.X-Varnish-Cacheable;
    unset resp.http.X-Varnish-TTL;
    unset resp.http.X-Varnish;
    {{'{{-'}}  end }}
    unset resp.http.X-Ban-Path;
    unset resp.http.X-Ban-Purge-Tags;
}

sub vcl_pipe {
    # A pipe is a dangerous HTTP thing, think smuggling, shared IP per domains, etc
    # better close it soon
    # Avoid pipes like plague
    set req.http.connection = "close";
    return(pipe);
}

sub vcl_hash {
    hash_data(req.url);
    hash_data(req.http.host);
    # BUG: vary accept-encoding seems to be wiped out
    # on some js response, enforce it!
    if (req.http.Accept-Encoding) {
        hash_data(req.http.Accept-Encoding);
    }
    # Include the X-Forward-Proto header, since we want to treat HTTPS
    # requests differently, and make sure this header is always passed
    # properly to the backend server.
    if (req.http.X-Forwarded-Proto) {
        hash_data(req.http.X-Forwarded-Proto);
    }
    return(lookup);
}

sub vcl_hit {
    if (obj.ttl>0s) {
        // classical hit with an object having a ttl
        return(deliver);
    }

    if (obj.ttl + obj.grace > 0s) {
        // --- GRACE MODE ---
        // object is in grace period
        // backend seems to be quite in a bad mood

        // if a code 50x is triggered, like maintenance page
        // or an error, this marker will prevent the result
        // from overriding the cache with this error
        set req.http.do-not-use-50x-responses = true;
        // we will deliver it but this will trigger a background fetch
        return (deliver);
    }
    // Synchronously refresh the object from the backend despite the
    // cache hit. Control will eventually pass to vcl_miss
    // this should be return(miss) in 4.1 and return(fetch) in 4.0
    // and restart in >6.2
    // http://varnish-cache.org/docs/6.3/whats-new/upgrading-6.2.html
    // 6.2 (miss is removed)
    return(restart);
    // 4.1
    // return(miss);
    // 4.0
    // return(fetch);
}

sub vcl_miss {
    if (req.method == "PURGE") {
      return(synth(404,"Not in cache."));
    }
    return(fetch);
}
