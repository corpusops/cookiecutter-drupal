{%- set db_tag = 'post' in cookiecutter.db_mode and 'postgres' or cookiecutter.db_mode -%}
version: '3.7'
x-images:
  env: &env
    env_file: [.env, docker.env]
    environment: &env_vars
      PHP_USER: "{{cookiecutter.php_user}}"
      PHP_GROUP: "${PHP_GROUP-{{cookiecutter.php_group}}}"
      DRUPAL_ENV_NAME: "${DRUPAL_ENV_NAME-prod}"
      APP_SECRET: "${APP_SECRET:-77fd8b950969a6909c46ab0b6fd5d062}"
      APP_SECRET: "${APP_SECRET-11111111111111111111111111111111}"
      APP_TYPE: "{{cookiecutter.app_type}}"
      IMAGE_MODE: phpfpm
      # parsed/replaced in CI via env-subst
      DRUPAL_NAME: "${DRUPAL_NAME-{{cookiecutter.drupal_project_name}}}"
      # Used in INSTALL ---------------
      PROFILE_NAME: "${PROFILE_NAME-{{ cookiecutter.profile_name }}}"
      SITE_NAME: "${SITE_NAME-{{ cookiecutter.name }}}"
      SITE_MAIL: "${SITE_MAIL-contact@{{ cookiecutter.mail_domain }}}"
      ADMIN_MAIL: "${ADMIN_MAIL-sysadmin+{{ cookiecutter.lname }}@{{ cookiecutter.mail_domain }}}"
      ADMIN_NAME: "${ADMIN_NAME-admin}"
      # ADMIN_PASS is set via docker-compose-dev.yml or via gitlab-ci secrets
      # or any other documented way before running install script
      SITE_DEFAULT_COUNTRY: "${SITE_DEFAULT_COUNTRY-FR}"
      DATE_DEFAULT_TIMEZONE: "${DATE_DEFAULT_TIMEZONE-Europe/Paris}"
      UPDATE_STATUS_MODULE: "${UPDATE_STATUS_MODULE-0}"
      DRUPAL_NAME: "${DRUPAL_NAME-{{ cookiecutter.drupal_project_name }}}"
      DRUPAL_URI: "${DRUPAL_URI-http://{{cookiecutter.local_domain}}:{{cookiecutter.local_http_port}}}"
      DRUSH_EXTRA_ARGS: "${DRUSH_EXTRA_ARGS- --uri=http://{{cookiecutter.local_domain}}:{{cookiecutter.local_http_port}}}"
      # Key settings ------------------
      NGINX_SERVERNAME: "${NGINX_SERVERNAME-{{cookiecutter.local_domain}}}"
      NGINX_SERVER_ALIASES: "${NGINX_SERVER_ALIASES-www.{{cookiecutter.local_domain}} www2.{{cookiecutter.local_domain}}}"
      DRUPAL__ALLOWED_HOSTS: "${DRUPAL__ALLOWED_HOSTS-{{cookiecutter.local_domain.replace(".","\\\\.")}}|www\\\\.{{cookiecutter.local_domain.replace(".","\\\\.")}}|www2\\\\.{{cookiecutter.local_domain.replace(".","\\\\.")}}}"
      DRUPAL__HTTP_PROTECT_USER: "${DRUPAL__HTTP_PROTECT_USER-}"
      DRUPAL__HTTP_PROTECT_PASSWORD: "${DRUPAL__HTTP_PROTECT_PASSWORD-}"
      DATABASE_PREFIX: "${DATABASE_PREFIX-}"
      {% if 'post' in cookiecutter.db_mode %}
      POSTGRES_STARTUP_TIMEOUT: "${POSTGRES_STARTUP_TIMEOUT-45s}"
      POSTGRES_HOST: "${POSTGRES_HOST-db}"
      POSTGRES_PORT: "${POSTGRES_PORT-5432}"
      POSTGRES_DB: "${POSTGRES_DB-db}"
      POSTGRES_USER: "${POSTGRES_USER-user}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD-password}"
      PGPASSWD: "${POSTGRES_PASSWORD-password}"
      PGPASSWORD: "${POSTGRES_PASSWORD-password}"
      DATABASE_DRIVER: "${DATABASE_DRIVER-pgsql}"
      DATABASE_DB: "${POSTGRES_DB-db}"
      DATABASE_USER: "${POSTGRES_USER-user}"
      DATABASE_PASSWD: "${POSTGRES_PASSWORD-password}"
      DATABASE_HOST: "${POSTGRES_HOST-db}"
      DATABASE_PORT: "${POSTGRES_PORT-5432}"
      {% elif 'mysql' in cookiecutter.db_mode %}
      MYSQL_HOST: "${MYSQL_HOST-db}"
      MYSQL_PORT: "${MYSQL_PORT-3306}"
      MYSQL_DATABASE: "${MYSQL_DATABASE-db}"
      MYSQL_USER: "${MYSQL_USER-user}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD-password}"
      DATABASE_DRIVER: "${DATABASE_DRIVER-mysql}"
      DATABASE_DB: "${MYSQL_DATABASE-db}"
      DATABASE_USER: "${MYSQL_USER-user}"
      DATABASE_PASSWD: "${MYSQL_PASSWORD-password}"
      DATABASE_HOST: "${MYSQL_HOST-db}"
      DATABASE_PORT: "${MYSQL_PORT-3306}"
      {% else %}
      DB_HOST: "${DB_HOST-db}"
      DB_PORT: "${DB_PORT-}"
      DB_NAME: "${DB_NAME-sites/default/files/.ht5.sqlite}"
      DB_USER: "${DB_USER-user}"
      DB_PASSWORD: "${DB_PASSWORD-password}"
      DATABASE_DRIVER: "${DATABASE_DRIVER-sqlite}"
      DATABASE_DB: "${DB_NAME-sites/default/files/.ht5.sqlite}"
      DATABASE_USER: "${DB_USER-user}"
      DATABASE_PASSWD: "${DB_PASSWORD-password}"
      DATABASE_HOST: "${DB_HOST-db}"
      DATABASE_PORT: "${DB_PORT-}"
      {% endif %}
      #
      COOKIE_DOMAIN: "${COOKIE_DOMAIN-{{cookiecutter.local_domain}}}"
      ABSOLUTE_URL_SCHEME: "${ABSOLUTE_URL_SCHEME-http}"
      ABSOLUTE_URL_DOMAIN: "${ABSOLUTE_URL_DOMAIN-{{cookiecutter.local_domain}}}"
      ABSOLUTE_URL_DOMAIN_ESCAPE: "${ABSOLUTE_URL_DOMAIN_ESCAPE-{{cookiecutter.local_domain.replace('.', '\\\\.')}}}"
      ABSOLUTE_URL_PORT: "${ABSOLUTE_URL_PORT-{{cookiecutter.local_http_port}}}"
      #
      PHP_MAX_WORKERS: "${PHP_MAX_WORKERS-10}"
      PHP_MAX_SPARE_WORKERS: "${PHP_MAX_SPARE_WORKERS-5}"
      PHP_MIN_SPARE_WORKERS: "${PHP_MIN_SPARE_WORKERS-3}"
      # VARNISH
      VARNISH__HTTP_PROTECT_USER: "${VARNISH__HTTP_PROTECT_USER-}"
      VARNISH__HTTP_PROTECT_PASSWORD: "${VARNISH__HTTP_PROTECT_PASSWORD-}"
      VARNISH_MEMORY_SIZE: "${VARNISH_MEMORY_SIZE-256MB}"
      VARNISH_HIDE_X_CACHE_TAGS: "${VARNISH_HIDE_X_CACHE_TAGS-}"
      VARNISH_BACKENDS: "${VARNISH_BACKENDS-nginx}"
      # VARNISH_NO_CACHE_COOKIE: "${VARNISH_NO_CACHE_COOKIE-NO_CACHE}"
      # VARNISH_NO_CACHE_URL: "${VARNISH_NO_CACHE_URL-/foo/bar/}"
      VARNISH_TTL_STATIC: "${VARNISH_TTL_STATIC-3h}"
      VARNISH_TTL_STATIC_BROWSER: "${VARNISH_TTL_STATIC_BROWSER-86400}"
      # This need to be changed in production
      MAILCATCHER_USER: "${MAILCATCHER_USER-mailcatcher}"
      MAILCATCHER_PASSWORD: "${MAILCATCHER_PASSWORD-mailcatcher}"
      # drupal settings enforcment
      DO_DRUPAL_SETTINGS_ENFORCEMENT: "${DO_DRUPAL_SETTINGS_ENFORCEMENT-1}"
      # Mail
      DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_HOST: "${DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_HOST-mailcatcher}"
      DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_PORT: "${DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_PORT-1025}"
      DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_PROTOCOL: "${DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_PROTOCOL-standard}"
      DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_AUTOTLS: "${DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_AUTOTLS-true}"
      DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_USERNAME: "${DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_USERNAME-mailcatcher}"
      DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_PASSWORD: "${DRUPAL_SETTINGS__SMTP_SETTINGS___SMTP_PASSWORD-mailcatcher}"

  {{cookiecutter.app_type}}: &{{cookiecutter.app_type}}
    <<: [ *env ]
    tty: true
    image: "${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE}:${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE_VERSION}-dev"
    environment: &{{cookiecutter.app_type}}_env
      <<: [ *env_vars ]
      # docker variables
      PROJECT_PACKAGE: "{{cookiecutter.drupal_project_name}}"
      PROJECT_DIR: "/code/app/"
    depends_on:
    - db
    - setup-{{db_tag}}
    {%if cookiecutter.with_redis%}- redis{%endif%}
    working_dir: /code/app
    command:
    - /bin/sh
    - '-c'
    - >-
      dockerize -wait http://setup-{{db_tag}} -timeout 45s
      && echo "launching init.sh"
      && /init.sh
    volumes:
      # - ./sys/crontab:/etc/cron.d/drupal # nope -> chown root done on that file, prefer a COPY, or a template
      - logs:/logs/
      - publiccontrib:{{cookiecutter.public_files_path}}/
      - private:{{cookiecutter.private_path}}/
      - cache:{{cookiecutter.cache_path}}
      # volume that we need to feed for nginx docker
      - webroot:/code/app/var/nginxwebroot
      {%-if not cookiecutter.remove_doc%}
      # host doc dir mounted inside container
      - ./app/var/private/docs:/code/app/var/private/docs
      {%endif%}
      - ./data:/code/data
services:
  mailcatcher:
    <<: [ *env ]
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      <<: [ *env_vars ]
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
    user: root
    entrypoint:
      - sh
      - '-c'
      - >
        chown mailhog /mails
        && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
        && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
        && su mailhog -p -c MailHog
  {%if cookiecutter.with_redis%}
  redis:
    <<: [ *env ]
    image: "{{cookiecutter.redis_image}}"
    hostname: redis
    volumes:
      - 'redis:/data'
  {%endif%}
  db:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    volumes:
      - postgresql:/var/lib/postgresql/data
  {%-if not cookiecutter.remove_varnish%}
  varnish:
    <<: [ *env ]
    # image: "corpusops/varnish"
    image: "${VARNISH_IMAGE}:${VARNISH_IMAGE_VERSION}-dev"
    depends_on:
      - nginx
    links:
      # for BAN request allow
      - "cron:cron"
      # for backend targeting
      - "nginx:nginx"
  {%-endif %}
  nginx:
    <<: [ *env ]
    image: "{{cookiecutter.nginx_image}}"
    depends_on:
      - {{cookiecutter.app_type}}
      - mailcatcher
    links:
      - {{cookiecutter.app_type}}:{{cookiecutter.app_type}}
      - mailcatcher:mailcatcher
    volumes:
      - ./sys/etc/nginx/vhost.conf.template:/etc/nginx/conf.d/default.conf.template
      - webroot:{{cookiecutter.public_path}}
      - publiccontrib:{{cookiecutter.public_files_path}}:ro
      - private:{{cookiecutter.private_path}}:ro
      - logs:/logs/
      - nginx-certs:/certs
      - ./data:/code/data
      # Note: docs not mounted in nginx volume, only php (drupal) can serve it
      # so php can apply security rules on prod access
    command:
      - sh
      - '-ec'
      - |-
        export DRUPAL__HTTP_PROTECT_USER=$${DRUPAL__HTTP_PROTECT_USER:-root}
        export DRUPAL__HTTP_PROTECT_PASSWORD=$${DRUPAL__HTTP_PROTECT_PASSWORD-}
        touch /etc/htpasswd-protect
        chmod 644 /etc/htpasswd-protect
        if [ "x$$DRUPAL__HTTP_PROTECT_PASSWORD" != "x" ];then
          echo "/ htpasswd:">&2
          echo "$$DRUPAL__HTTP_PROTECT_PASSWORD"\
          | htpasswd -bim /etc/htpasswd-protect "$$DRUPAL__HTTP_PROTECT_USER"
        fi
        v=/etc/nginx/conf.d/default.conf
        frep $${v}.template:$${v} --overwrite
        exec /bin/supervisord.sh
    environment:
      <<: [ *env_vars ]
      SUPERVISORD_CONFIGS: cron nginx rsyslog
      NO_SSL: "0"
      NO_FORCE_SSL: "0"
  {{cookiecutter.app_type}}:
    <<: [ *{{cookiecutter.app_type}} ]
  {%- if not cookiecutter.remove_cron %}
  cron:
    <<: [ *{{cookiecutter.app_type}} ]
    environment:
      <<: [ *{{cookiecutter.app_type}}_env ]
      IMAGE_MODE: cron
      NO_INSTALL: "1"
    depends_on:
    - {{cookiecutter.app_type}}
  {% endif %}
  backup:
    <<: [ *env ]
    image: "corpusops/dbsmartbackup:postgres-{{cookiecutter.db_version}}"
    restart: always
    volumes:
      - backupdb-dumps:/var/db_smart_backup/
      - backupdb-logs:/var/db_smart_backup/logs/
{% if db_tag == 'postgres' %}  setup-postgres:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT-45s}
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "{% if 'gis' in cookiecutter.db_mode%}select 1 from spatial_ref_sys limit 1;select postgis_version();{%else%}select 1{%endif%}"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@db/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout 45s \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
{% endif %}
volumes:
  backupdb-logs:
  backupdb-dumps:
  postgresql:
  {%if cookiecutter.with_redis%}redis:{%endif%}
  nginx-certs:
  webroot:
  publiccontrib:
  private:
  cache:
  logs:
  mails:

