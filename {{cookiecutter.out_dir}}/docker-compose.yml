{%- set db_tag = 'post' in cookiecutter.db_mode and 'postgres' or cookiecutter.db_mode -%}
version: '3.7'
x-images:
  env: &env {env_file: [.env, docker.env]}
  {{cookiecutter.app_type}}: &{{cookiecutter.app_type}}
    <<: [ *env ]
    tty: true
    image: "${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE}:${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE_VERSION}-dev"
    environment: &{{cookiecutter.app_type}}_env
      PHP_USER: "{{cookiecutter.app_type}}"
      PHP_GROUP: "{%if cookiecutter.base_os=='centos'%}apache{%else%}www-data{%endif%}"
      APP_ENV: "${APP_ENV:-prod}"
      APP_SECRET: "${APP_SECRET:-77fd8b950969a6909c46ab0b6fd5d062}"
      POSTGRES_STARTUP_TIMEOUT: "45s"
      IMAGE_MODE: phpfpm
    depends_on:
    - db
    - setup-{{db_tag}}
    {%if cookiecutter.with_redis%}- redis{%endif%}
    working_dir: /code/app
    command:
    - /bin/sh
    - '-c'
    - >-
      dockerize -wait http://setup-{{db_tag}} -timeout 45s
      && echo "launching init.sh"
      && /init.sh
    volumes:
      # - ./sys/crontab:/etc/cron.d/drupal # nope -> chown root done on that file, prefer a COPY, or a template
      - logs:/logs/
      - publiccontrib:{{cookiecutter.public_files_path}}
      - private:{{cookiecutter.private_path}}
      - cache:{{cookiecutter.cache_path}}
      # volume that we need to feed for nginx docker
      - webroot:/code/app/var/nginxwebroot
services:
  mailcatcher:
    <<: [ *env ]
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
    user: root
    entrypoint:
      - sh
      - '-c'
      - >
        chown mailhog /mails
        && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
        && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
        && su mailhog -p -c MailHog
  {%if cookiecutter.with_redis%}
  redis:
    <<: [ *env ]
    image: "{{cookiecutter.redis_image}}"
    hostname: redis
    volumes:
      - 'redis:/data'
  {%endif%}
  db:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    volumes:
      - postgresql:/var/lib/postgresql/data
  nginx:
    <<: [ *env ]
    image: "{{cookiecutter.nginx_image}}"
    depends_on:
      - {{cookiecutter.app_type}}
      - mailcatcher
    links:
      - {{cookiecutter.app_type}}:{{cookiecutter.app_type}}
      - mailcatcher:mailcatcher
    volumes:
      - ./sys/etc/nginx/vhost.conf.template:/etc/nginx/conf.d/default.conf.template
      - webroot:{{cookiecutter.public_path}}
      - publiccontrib:{{cookiecutter.public_files_path}}:ro
      - private:{{cookiecutter.private_path}}:ro
      - logs:/logs/
      - nginx-certs:/certs
    command:
      - sh
      - '-ec'
      - |-
        export DRUPAL__HTTP_PROTECT_USER=$${DRUPAL__HTTP_PROTECT_USER:-root}
        export DRUPAL__HTTP_PROTECT_PASSWORD=$${DRUPAL__HTTP_PROTECT_PASSWORD-}
        touch /etc/htpasswd-protect
        chmod 644 /etc/htpasswd-protect
        if [ "x$$DRUPAL__HTTP_PROTECT_PASSWORD" != "x" ];then
          echo "/ htpasswd:">&2
          echo "$$DRUPAL__HTTP_PROTECT_PASSWORD"\
          | htpasswd -bim /etc/htpasswd-protect "$$DRUPAL__HTTP_PROTECT_USER"
        fi
        v=/etc/nginx/conf.d/default.conf
        frep $${v}.template:$${v} --overwrite
        exec /bin/supervisord.sh
    environment:
    - SUPERVISORD_CONFIGS=/etc/supervisor.d/cron /etc/supervisor.d/nginx /etc/supervisor.d/rsyslog
  {{cookiecutter.app_type}}:
    <<: [ *{{cookiecutter.app_type}} ]
  {%- if not cookiecutter.remove_cron %}
  cron:
    <<: [ *{{cookiecutter.app_type}} ]
    environment:
      <<: [ *{{cookiecutter.app_type}}_env ]
      IMAGE_MODE: cron
    depends_on:
    - {{cookiecutter.app_type}}
  {% endif %}
  backup:
    <<: [ *env ]
    image: "corpusops/dbsmartbackup:postgres-10"
    restart: always
    volumes:
      - backupdb-dumps:/var/db_smart_backup/
      - backupdb-logs:/var/db_smart_backup/logs/
{% if db_tag == 'postgres' %}  setup-postgres:
    <<: [ *env ]
    image: "corpusops/postgres:10"
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=45s
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "{% if 'gis' in cookiecutter.db_mode%}select 1 from spatial_ref_sys limit 1;select postgis_version();{%else%}select 1{%endif%}"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@db/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout 45s \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
{% endif %}
volumes:
  backupdb-logs:
  backupdb-dumps:
  postgresql:
  {%if cookiecutter.with_redis%}redis:{%endif%}
  nginx-certs:
  webroot:
  publiccontrib:
  private:
  cache:
  logs:
  mails:

